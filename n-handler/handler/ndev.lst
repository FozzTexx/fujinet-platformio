mads 2.1.0 build 8 (23 Dec 19)
Source: ndev.s
     1 					;; N: Device Handler
     2 					;; Compile with MADS
     3
     4 					;; Author: Thomas Cherryhomes
     5 					;;   <thom.cherryhomes@gmail.com>
     6
     7 					;; CURRENT IOCB IN ZERO PAGE
     8 					
     9 = 0020			ZIOCB   =     $20      ; ZP IOCB
    10 = 0020			ZICHID  =     ZIOCB    ; ID
    11 = 0021			ZICDNO  =     ZIOCB+1  ; UNIT #
    12 = 0022			ZICCOM  =     ZIOCB+2  ; COMMAND
    13 = 0023			ZICSTA  =     ZIOCB+3  ; STATUS
    14 = 0024			ZICBAL  =     ZIOCB+4  ; BUF ADR LOW
    15 = 0025			ZICBAH  =     ZIOCB+5  ; BUF ADR HIGH
    16 = 0026			ZICPTL  =     ZIOCB+6  ; PUT ADDR L
    17 = 0027			ZICPTH  =     ZIOCB+7  ; PUT ADDR H
    18 = 0028			ZICBLL  =     ZIOCB+8  ; BUF LEN LOW
    19 = 0029			ZICBLH  =     ZIOCB+9  ; BUF LEN HIGH
    20 = 002A			ZICAX1  =     ZIOCB+10 ; AUX 1
    21 = 002B			ZICAX2  =     ZIOCB+11 ; AUX 2
    22 = 002C			ZICAX3  =     ZIOCB+12 ; AUX 3
    23 = 002D			ZICAX4  =     ZIOCB+13 ; AUX 4
    24 = 002E			ZICAX5  =     ZIOCB+14 ; AUX 5
    25 = 002F			ZICAX6  =     ZIOCB+15 ; AUX 6
    26
    27 = 000C			DOSINI  =     $0C      ; DOSINI
    28
    29 				       ; INTERRUPT VECTORS
    30 				       ; AND OTHER PAGE 2 VARS
    31
    32 = 0202			VPRCED  =     $0202   ; PROCEED VCTR
    33 = 02C6			COLOR2  =     $02C6   ; MODEF BKG C
    34 = 02E7			MEMLO   =     $02E7   ; MEM LO
    35 = 02EA			DVSTAT  =     $02EA   ; 4 BYTE STATS
    36
    37 				       ; PAGE 3
    38 				       ; DEVICE CONTROL BLOCK (DCB)
    39
    40 = 0300			DCB     =     $0300   ; BASE
    41 = 0300			DDEVIC  =     DCB     ; DEVICE #
    42 = 0301			DUNIT   =     DCB+1   ; UNIT #
    43 = 0302			DCOMND  =     DCB+2   ; COMMAND
    44 = 0303			DSTATS  =     DCB+3   ; STATUS/DIR
    45 = 0304			DBUFL   =     DCB+4   ; BUF ADR L
    46 = 0305			DBUFH   =     DCB+5   ; BUF ADR H
    47 = 0306			DTIMLO  =     DCB+6   ; TIMEOUT (S)
    48 = 0307			DRSVD   =     DCB+7   ; NOT USED
    49 = 0308			DBYTL   =     DCB+8   ; BUF LEN L
    50 = 0309			DBYTH   =     DCB+9   ; BUF LEN H
    51 = 030A			DAUXL   =     DCB+10  ; AUX BYTE L
    52 = 030B			DAUXH   =     DCB+11  ; AUX BYTE H
    53
    54 = 031A			HATABS  =     $031A   ; HANDLER TBL
    55
    56 				       ; IOCB'S * 8
    57
    58 = 0340			IOCB    =     $0340   ; IOCB BASE
    59 = 0340			ICHID   =     IOCB    ; ID
    60 = 0341			ICDNO   =     IOCB+1  ; UNIT #
    61 = 0342			ICCOM   =     IOCB+2  ; COMMAND
    62 = 0343			ICSTA   =     IOCB+3  ; STATUS
    63 = 0344			ICBAL   =     IOCB+4  ; BUF ADR LOW
    64 = 0345			ICBAH   =     IOCB+5  ; BUF ADR HIGH
    65 = 0346			ICPTL   =     IOCB+6  ; PUT ADDR L
    66 = 0347			ICPTH   =     IOCB+7  ; PUT ADDR H
    67 = 0348			ICBLL   =     IOCB+8  ; BUF LEN LOW
    68 = 0349			ICBLH   =     IOCB+9  ; BUF LEN HIGH
    69 = 034A			ICAX1   =     IOCB+10 ; AUX 1
    70 = 034B			ICAX2   =     IOCB+11 ; AUX 2
    71 = 034C			ICAX3   =     IOCB+12 ; AUX 3
    72 = 034D			ICAX4   =     IOCB+13 ; AUX 4
    73 = 034E			ICAX5   =     IOCB+14 ; AUX 5
    74 = 034F			ICAX6   =     IOCB+15 ; AUX 6
    75
    76 				       ; HARDWARE REGISTERS
    77
    78 = D302			PACTL   =     $D302   ; PIA CTRL A
    79
    80 				       ; OS ROM VECTORS
    81
    82 = E456			CIOV    =     $E456   ; CIO ENTRY
    83 = E459			SIOV    =     $E459   ; SIO ENTRY
    84
    85 				       ; CONSTANTS
    86
    87 = 0009			PUTREC  =     $09     ; CIO PUTREC
    88 = 0071			DEVIDN  =     $71     ; SIO DEVID
    89 = 0040			DSREAD  =     $40     ; FUJI->ATARI
    90 = 0080			DSWRIT  =     $80     ; ATARI->FUJI
    91 = 0004			MAXDEV  =     4       ; # OF N: DEVS
    92 = 0088			EOF     =     $88     ; ERROR 136
    93 = 009B			EOL     =     $9B     ; EOL CHAR
    94
    95 				;;; Macros ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    96
    97 					.MACRO DCBC
    98 					.LOCAL
    99 					LDY	#$0C
   100 				?DCBL	LDA	%%1,Y
   101 					STA	DCB,Y
   102 					DEY
   103 					BPL	?DCBL
   104 					.ENDL
   105 					.ENDM
   106 						
   107 				;;; Initialization ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   108 					
   109 				START:	
   110 FFFF> 3100-3445> A5 0C		LDA	DOSINI
   111 3102 8D 44 34			STA	DSAV
   112 3105 8D 25 31			STA	RESET+1
   113 3108 A5 0D			LDA	DOSINI+1
   114 310A 8D 45 34			STA	DSAV+1
   115 310D 8D 26 31			STA	RESET+2
   116 3110 A9 24			LDA	#<RESET
   117 3112 85 0C			STA	DOSINI
   118 3114 A9 31			LDA	#>RESET
   119 3116 85 0D			STA	DOSINI+1
   120
   121 					;;  Alter MEMLO
   122 					
   123 3118 A9 00			LDA	#<PGEND		
   124 311A 8D E7 02			STA	MEMLO
   125 311D A9 36			LDA	#>PGEND
   126 311F 8D E8 02			STA	MEMLO+1
   127
   128 3122 50 11			BVC	IHTBS
   129 					
   130 3124			RESET:
   131 3124 20 FF FF			JSR	$FFFF		; Jump to extant DOSINI
   132 3127 20 35 31			JSR	IHTBS		; Insert into HATABS
   133
   134 					;;  Alter MEMLO
   135 					
   136 312A A9 00			LDA	#<PGEND		
   137 312C 8D E7 02			STA	MEMLO
   138 312F A9 36			LDA	#>PGEND
   139 3131 8D E8 02			STA	MEMLO+1
   140
   141 					;; Back to DOS
   142 					
   143 3134 60				RTS
   144
   145 					;; Insert entry into HATABS
   146 					
   147 3135			IHTBS:
   148 3135 A0 00			LDY	#$00
   149 3137 B9 1A 03		IH1	LDA	HATABS,Y
   150 313A F0 0B			BEQ	HFND
   151 313C C9 4E			CMP	#'N'
   152 313E F0 07			BEQ	HFND
   153 3140 C8				INY
   154 3141 C8				INY
   155 3142 C8				INY
   156 3143 C0 21			CPY	#11*3
   157 3145 90 F0			BCC	IH1
   158
   159 					;; Found a slot
   160
   161 3147			HFND:
   162 3147 A9 4E			LDA	#'N'
   163 3149 99 1A 03			STA	HATABS,Y
   164 314C A9 1A			LDA	#<CIOHND
   165 314E 99 1B 03			STA	HATABS+1,Y
   166 3151 A9 34			LDA	#>CIOHND
   167 3153 99 1C 03			STA	HATABS+2,Y
   168
   169 					;; And we're done with HATABS
   170
   171 					;; Query FUJINET
   172
   173 3156 20 2E 33			JSR	STPOLL
   174
   175 					;; Output Ready/Error
   176
   177 3159			OBANR:
   178 3159 A2 00			LDX	#$00		; IOCB #0
   179 315B A9 09			LDA	#PUTREC
   180 315D 9D 42 03			STA	ICCOM,X
   181 3160 A9 28			LDA	#$28		; 40 CHARS Max
   182 3162 9D 48 03			STA	ICBLL,X
   183 3165 A9 00			LDA	#$00
   184 3167 9D 49 03			STA	ICBLH,X
   185 316A AD 03 03			LDA	DSTATS		; Check DSTATS
   186 316D 10 0C			BPL	OBRDY		; < 128 = Ready
   187
   188 					;; Status returned error.
   189 					
   190 316F			OBERR:
   191 316F A9 35			LDA	#<BERROR
   192 3171 9D 44 03			STA	ICBAL,X
   193 3174 A9 34			LDA	#>BERROR
   194 3176 9D 45 03			STA	ICBAH,X
   195 3179 50 0A			BVC	OBCIO
   196
   197 					;; Status returned ready.
   198 					
   199 317B			OBRDY:	
   200 317B A9 26			LDA	#<BREADY
   201 317D 9D 44 03			STA	ICBAL,X
   202 3180 A9 34			LDA	#>BREADY
   203 3182 9D 45 03			STA	ICBAH,X
   204
   205 3185			OBCIO:
   206 3185 20 56 E4			JSR	CIOV
   207
   208 					;; Vector in proceed interrupt
   209
   210 3188			SPRCED:
   211 3188 A9 13			LDA	#<PRCVEC
   212 318A 8D 02 02			STA	VPRCED
   213 318D A9 34			LDA	#>PRCVEC
   214 318F 8D 03 02			STA	VPRCED+1
   215
   216 					;; And we are done, back to DOS.
   217 					
   218 3192 60				RTS
   219
   220 				;;; End Initialization Code ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   221
   222 				;;; CIO OPEN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   223
   224 3193			OPEN:
   225 					;; Prepare DCB
   226 					
   227 3193 20 0F 34			JSR	GDIDX		; Get Device ID in X (0-3)
   228 3196 A5 21			LDA	ZICDNO		; IOCB UNIT # (1-4)
   229 3198 8D E6 31			STA	OPNDCB+1	; Store in DUNIT
   230 319B A5 24			LDA	ZICBAL		; Get filename buffer
   231 319D 8D E9 31			STA	OPNDCB+4	; stuff in DBUF
   232 31A0 A5 25			LDA	ZICBAH		; ...
   233 31A2 8D EA 31			STA	OPNDCB+5	; ...
   234 31A5 A5 2A			LDA	ZICAX1		; Get desired AUX1/AUX2
   235 31A7 8D EF 31			STA	OPNDCB+10	; Save them, and store in DAUX1/DAUX2
   236 31AA 9D 47 34			STA	AX1SV,X		; ...
   237 31AD A5 2B			LDA	ZICAX2		; ...
   238 31AF 8D F0 31			STA	OPNDCB+11	; ...
   239 31B2 9D 4B 34			STA	AX2SV,X		; ...
   240
   241 					;;  Copy DCB template to DCB
   242 					
   243 31B5				DCBC	OPNDCB
Macro: DCBC [Source: ndev.s]
     2 31B5 A0 0C			LDY	#$0C
     3 31B7 B9 E5 31		?DCBL	LDA	OPNDCB,Y
     4 31BA 99 00 03			STA	DCB,Y
     5 31BD 88				DEY
     6 31BE 10 F7			BPL	?DCBL
Source: ndev.s
   244
   245 					;;  Send to #FujiNet
   246 					
   247 31C0 20 59 E4			JSR	SIOV
   248 				                                    
   249 					;; Return DSTATS, unless 144, then get extended error
   250 					
   251 31C3			OPCERR:
   252 31C3 AC 03 03			LDY	DSTATS		; GET SIO STATUS
   253 31C6 C0 90			CPY	#$90		; ERR 144?
   254 31C8 D0 06			BNE	OPDONE		; NOPE. RETURN DSTATS
   255 				       
   256 					;; 144 - get extended error
   257
   258 31CA 20 2E 33			JSR	STPOLL  	; POLL FOR STATUS
   259 31CD AC ED 02			LDY	DVSTAT+3
   260
   261 				       ; RESET BUFFER LENGTH + OFFSET
   262 				       
   263 31D0			OPDONE:
   264 31D0 A9 01			LDA	#$01
   265 31D2 8D 46 34			STA	TRIP
   266 31D5 20 0F 34			JSR     GDIDX
   267 31D8 A9 00			LDA     #$00
   268 31DA 9D 5F 34			STA     RLEN,X
   269 31DD 9D 67 34			STA     TOFF,X
   270 31E0 9D 63 34			STA     ROFF,X
   271 31E3 98				TYA
   272 31E4 60				RTS             ; AY = ERROR
   273
   274 31E5			OPNDCB:
   275 31E5 71				.BYTE      DEVIDN  ; DDEVIC
   276 31E6 FF				.BYTE      $FF     ; DUNIT
   277 31E7 4F				.BYTE      'O'     ; DCOMND
   278 31E8 80				.BYTE      $80     ; DSTATS
   279 31E9 FF				.BYTE      $FF     ; DBUFL
   280 31EA FF				.BYTE      $FF     ; DBUFH
   281 31EB 0F				.BYTE      $0F     ; DTIMLO
   282 31EC 00				.BYTE      $00     ; DRESVD
   283 31ED 00				.BYTE      $00     ; DBYTL
   284 31EE 01				.BYTE      $01     ; DBYTH
   285 31EF FF				.BYTE      $FF     ; DAUX1
   286 31F0 FF				.BYTE      $FF     ; DAUX2
   287 					
   288 				;;; End CIO OPEN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   289
   290 				;;; CIO CLOSE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   291
   292 31F1			CLOSE:	
   293 31F1 20 06 34			JSR     DIPRCD		; Disable Interrupts
   294 31F4 A5 21			LDA     ZICDNO		; IOCB Unit #
   295 31F6 8D 10 32			STA     CLODCB+1	; to DCB...
   296 					
   297 31F9				DCBC	CLODCB		; Copy DCB into place
Macro: DCBC [Source: ndev.s]
     2 31F9 A0 0C			LDY	#$0C
     3 31FB B9 0F 32		?DCBL	LDA	CLODCB,Y
     4 31FE 99 00 03			STA	DCB,Y
     5 3201 88				DEY
     6 3202 10 F7			BPL	?DCBL
Source: ndev.s
   298
   299 3204 20 59 E4			JSR	SIOV
   300
   301 3207 20 B1 32			JSR	PFLUSH		; Do a Put Flush if needed.
   302
   303 320A AC 03 03			LDY	DSTATS		; Return SIO status
   304 320D 98				TYA
   305 320E 60				RTS			; Done.
   306
   307 320F 71			CLODCB .BYTE	DEVIDN		; DDEVIC
   308 3210 FF			       .BYTE	$FF		; DUNIT
   309 3211 43			       .BYTE	'C'		; DCOMND
   310 3212 00			       .BYTE	$00		; DSTATS
   311 3213 00			       .BYTE	$00		; DBUFL
   312 3214 00			       .BYTE	$00		; DBUFH
   313 3215 0F			       .BYTE	$0F		; DTIMLO
   314 3216 00			       .BYTE	$00		; DRESVD
   315 3217 00			       .BYTE	$00		; DBYTL
   316 3218 00			       .BYTE	$00		; DBYTH
   317 3219 00			       .BYTE	$00		; DAUX1
   318 321A 00			       .BYTE	$00		; DAUX2
   319 					
   320 				;;; End CIO CLOSE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   321
   322 				;;; CIO GET ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   323
   324 321B			GET:
   325 321B 20 0F 34			JSR	GDIDX		; IOCB UNIT #-1 into X 
   326 321E BD 5F 34			LDA	RLEN,X		; Get # of RX chars waiting
   327 3221 D0 3C			BNE     GETDISC		; LEN > 0?
   328
   329 					;; If RX buffer is empty, get # of chars waiting...
   330 					
   331 3223 20 2E 33			JSR	STPOLL		; Status Poll
   332 3226 20 0F 34			JSR	GDIDX		; IOCB UNIT -1 into X (because Poll trashes X)
   333 3229 AD EA 02			LDA	DVSTAT		; # of bytes waiting (0-127)
   334 322C 9D 5F 34			STA	RLEN,X		; Store in RX Len
   335 322F D0 05			BNE     GETDO		; We have something waiting...
   336
   337 					;; At this point, if RLEN is still zero, then return
   338 					;; with an EOF.
   339 					
   340 3231 A0 88			LDY     #EOF		; ERROR 136 - End of File
   341 3233 A9 88			LDA     #EOF
   342 3235 60				RTS
   343
   344 3236			GETDO:
   345 3236 A5 21			LDA	ZICDNO		; Get IOCB UNIT #
   346 3238 8D 85 32			STA	GETDCB+1	; Store into DUNIT
   347 323B A9 35			LDA	#>RBUF		; Buffer ptr
   348 323D 8D 89 32			STA	GETDCB+5	; store into DBUFH
   349 3240 AD EA 02			LDA	DVSTAT		; # of bytes waiting
   350 3243 8D 8C 32			STA	GETDCB+8	; Store into DBYT...
   351 3246 8D 8E 32			STA	GETDCB+10	; and DAUX1...
   352 				       
   353 3249				DCBC	GETDCB		; Prepare DCB
Macro: DCBC [Source: ndev.s]
     2 3249 A0 0C			LDY	#$0C
     3 324B B9 84 32		?DCBL	LDA	GETDCB,Y
     4 324E 99 00 03			STA	DCB,Y
     5 3251 88				DEY
     6 3252 10 F7			BPL	?DCBL
Source: ndev.s
   354 					
   355 3254 20 59 E4			JSR	SIOV		; Call SIO to do the GET
   356
   357 					;; Clear the Receive buffer offset.
   358 					
   359 3257 20 0F 34			JSR	GDIDX		; IOCB UNIT #-1 into X
   360 325A A9 00			LDA	#$00
   361 325C 9D 63 34			STA     ROFF,X
   362
   363 325F			GETDISC:
   364 325F AD EC 02			LDA     DVSTAT+2	; Did we disconnect?
   365 3262 D0 05			BNE     GETUPDP		; nope, update the buffer cursor.
   366
   367 					;; We disconnected, emit an EOF.
   368 					
   369 3264 A9 88			LDA	#EOF
   370 3266 A0 88			LDY	#EOF
   371 3268 60				RTS			; buh-bye.
   372
   373 3269			GETUPDP:
   374 3269 DE 5F 34			DEC     RLEN,X		; Decrement RX length.
   375 326C BC 63 34			LDY     ROFF,X		; Get RX offset cursor.
   376
   377 					;; Return Next char from appropriate RX buffer.
   378 					
   379 326F B9 00 35			LDA	RBUF,y
   380 					
   381 					;; Increment RX offset
   382 					
   383 3272 FE 63 34		GX:	INC	ROFF,X		; Increment RX offset.
   384 3275 A8				TAY			; stuff returned val into Y temporarily.
   385
   386 					;; If requested RX buffer is empty, reset TRIP.
   387
   388 3276 BD 5F 34			LDA	RLEN,X
   389 3279 D0 05			BNE	GETDONE
   390 327B A9 00			LDA     #$00
   391 327D 8D 46 34			STA     TRIP
   392
   393 					;; Return byte back to CIO.
   394 					
   395 3280			GETDONE:
   396 3280 98				TYA			; Move returned val back.
   397 3281 A0 01			LDY	#$01		; SUCCESS
   398
   399 3283 60				RTS			; DONE...
   400
   401 3284 71			GETDCB .BYTE     DEVIDN  ; DDEVIC
   402 3285 FF			       .BYTE     $FF     ; DUNIT
   403 3286 52			       .BYTE     'R'     ; DCOMND
   404 3287 40			       .BYTE     $40     ; DSTATS
   405 3288 00			       .BYTE     $00     ; DBUFL
   406 3289 FF			       .BYTE     $FF     ; DBUFH
   407 328A 0F			       .BYTE     $0F     ; DTIMLO
   408 328B 00			       .BYTE     $00     ; DRESVD
   409 328C FF			       .BYTE     $FF     ; DBYTL
   410 328D 00			       .BYTE     $00     ; DBYTH
   411 328E FF			       .BYTE     $FF     ; DAUX1
   412 328F 00			       .BYTE     $00     ; DAUX2
   413 					
   414 				;;; End CIO GET ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   415
   416 				;;; CIO PUT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   417
   418 3290			PUT:
   419 					;; Add to TX buffer.
   420
   421 3290 20 0F 34			JSR	GDIDX
   422 3293 BC 67 34			LDY	TOFF,X  ; GET TX cursor.
   423 3296 99 80 35			STA	TBUF,Y		; TX Buffer
   424 					
   425 3299 FE 67 34		POFF:	INC	TOFF,X		; Increment TX cursor
   426 329C A0 01			LDY	#$01		; SUCCESSFUL
   427
   428 					;; Do a PUT FLUSH if EOL or buffer full.
   429
   430 329E C9 9B			CMP     #EOL    ; EOL?
   431 32A0 F0 0B			BEQ     FLUSH  ; FLUSH BUFFER
   432 32A2 20 0F 34			JSR     GDIDX   ; GET OFFSET
   433 32A5 BD 67 34			LDA     TOFF,X
   434 32A8 C9 7F		        CMP     #$7F    ; LEN = $FF?
   435 32AA F0 01		        BEQ     FLUSH  ; FLUSH BUFFER
   436 32AC 60			        RTS
   437
   438 				       ; FLUSH BUFFER, IF ASKED.
   439
   440 32AD 20 B1 32		FLUSH  JSR     PFLUSH  ; FLUSH BUFFER
   441 32B0 60			       RTS
   442
   443 32B1			PFLUSH:	
   444
   445 				       ; CHECK CONNECTION, AND EOF
   446 				       ; IF DISCONNECTED.
   447
   448 32B1 20 2E 33		       JSR     STPOLL  ; GET STATUS
   449 32B4 AD EC 02		       LDA     DVSTAT+2
   450 32B7 D0 05		       BNE     PF1   
   451 32B9 A0 88		       LDY     #EOF
   452 32BB A9 88		       LDA     #EOF
   453 32BD 60			       RTS
   454
   455 32BE 20 0F 34		PF1:	JSR     GDIDX   ; GET DEV X
   456 32C1 BD 67 34		       LDA     TOFF,X
   457 32C4 D0 03		       BNE     PF2
   458 32C6 4C F2 32		       JMP     PDONE
   459
   460 				       ; FILL OUT DCB FOR PUT FLUSH
   461
   462 32C9 A5 21		PF2:	LDA     ZICDNO
   463 32CB 8D F6 32		       STA     PUTDCB+1
   464
   465 				       ; PICK APROPOS BUFFER PAGE
   466 				       
   467 32CE A9 35			LDA	#>TBUF
   468 					
   469 				       ; FINISH DCB AND DO SIOV
   470
   471 32D0 8D FA 32		TBX:	STA     PUTDCB+5
   472 32D3 BD 67 34			LDA     TOFF,X
   473 32D6 8D FD 32			STA     PUTDCB+8
   474 32D9 8D FF 32			STA     PUTDCB+10
   475
   476 32DC				DCBC	PUTDCB
Macro: DCBC [Source: ndev.s]
     2 32DC A0 0C			LDY	#$0C
     3 32DE B9 F5 32		?DCBL	LDA	PUTDCB,Y
     4 32E1 99 00 03			STA	DCB,Y
     5 32E4 88				DEY
     6 32E5 10 F7			BPL	?DCBL
Source: ndev.s
   477 32E7 20 59 E4			JSR     SIOV
   478 				       
   479 				       ; CLEAR THE OFFSET CURSOR
   480 				       ; AND LENGTH
   481
   482 32EA 20 0F 34		       JSR     GDIDX
   483 32ED A9 00		       LDA     #$00
   484 32EF 9D 67 34		       STA     TOFF,X
   485
   486 32F2 A0 01		PDONE:	LDY     #$01
   487 32F4 60			       RTS
   488
   489 32F5 71			PUTDCB .BYTE      DEVIDN  ; DDEVIC
   490 32F6 FF			       .BYTE      $FF     ; DUNIT
   491 32F7 57			       .BYTE      'W'     ; DCOMND
   492 32F8 80			       .BYTE      $80     ; DSTATS
   493 32F9 80			       .BYTE      $80     ; DBUFL
   494 32FA FF			       .BYTE      $FF     ; DBUFH
   495 32FB 0F			       .BYTE      $0F     ; DTIMLO
   496 32FC 00			       .BYTE      $00     ; DRESVD
   497 32FD FF			       .BYTE      $FF     ; DBYTL
   498 32FE 00			       .BYTE      $00     ; DBYTH
   499 32FF FF			       .BYTE      $FF     ; DAUX1
   500 3300 00			       .BYTE      $00     ; DAUX2
   501 					
   502 				;;; End CIO PUT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   503 					
   504 				;;; CIO STATUS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   505
   506 3301			STATUS:
   507 3301 20 FD 33			JSR     ENPRCD  ; ENABLE PRCD
   508 3304 20 0F 34		       JSR     GDIDX   ; GET DEVICE#
   509 3307 BD 5F 34		       LDA     RLEN,X  ; GET RLEN
   510 330A D0 05		       BNE     STSLEN  ; RLEN > 0?
   511 330C AD 46 34		       LDA     TRIP
   512 330F D0 0E		       BNE     STTRI1  ; TRIP = 1?
   513
   514 				       ; NO TRIP, RETURN SAVED LEN
   515
   516 3311 BD 5F 34		STSLEN LDA     RLEN,X  ; GET RLEN
   517 3314 8D EA 02		       STA     DVSTAT  ; RET IN DVSTAT
   518 3317 A9 00		       LDA     #$00
   519 3319 8D EB 02		       STA     DVSTAT+1
   520 331C 4C 2A 33		       JMP     STDONE  ; DONE.
   521
   522 				       ; DO POLL AND UPDATE RCV LEN
   523
   524 331F 20 2E 33		STTRI1 JSR     STPOLL  ; POLL FOR ST
   525 3322 9D 5F 34			STA	RLEN,X
   526 						
   527 				       ; UPDATE TRIP FLAG
   528
   529 3325 D0 03		STTRIU BNE     STDONE
   530 3327 8D 46 34		       STA     TRIP    ; RLEN = 0
   531
   532 				       ; RETURN CONNECTED? FLAG.
   533
   534 332A AD EC 02		STDONE LDA     DVSTAT+2
   535 332D 60			       RTS
   536
   537 				       ; ASK FUJINET FOR STATUS
   538
   539 332E			STPOLL:	
   540 332E A5 21		       LDA     ZICDNO  ; IOCB #
   541 3330 8D 5C 33		       STA     STADCB+1
   542
   543 3333				DCBC	STADCB
Macro: DCBC [Source: ndev.s]
     2 3333 A0 0C			LDY	#$0C
     3 3335 B9 5B 33		?DCBL	LDA	STADCB,Y
     4 3338 99 00 03			STA	DCB,Y
     5 333B 88				DEY
     6 333C 10 F7			BPL	?DCBL
Source: ndev.s
   544
   545 333E 20 59 E4		       JSR     SIOV    ; DO IT...
   546
   547 					;; > 127 bytes? make it 127 bytes.
   548
   549 3341 AD EB 02			LDA	DVSTAT+1
   550 3344 D0 07			BNE	STADJ
   551 3346 AD EA 02			LDA	DVSTAT
   552 3349 30 02			BMI	STADJ
   553 334B 50 0A			BVC	STP2		; <= 127 bytes...
   554
   555 334D A9 7F		STADJ	LDA	#$7F
   556 334F 8D EA 02			STA	DVSTAT
   557 3352 A9 00			LDA	#$00
   558 3354 8D EB 02			STA	DVSTAT+1
   559 					
   560 				       ; A = CONNECTION STATUS
   561
   562 3357 AD EC 02		STP2   LDA     DVSTAT+2
   563 335A 60			       RTS
   564
   565 335B 71			STADCB .BYTE      DEVIDN  ; DDEVIC
   566 335C FF			       .BYTE      $FF     ; DUNIT
   567 335D 53			       .BYTE      'S'     ; DCOMND
   568 335E 40			       .BYTE      $40     ; DSTATS
   569 335F EA			       .BYTE      $EA     ; DBUFL
   570 3360 02			       .BYTE      $02     ; DBUFH
   571 3361 0F			       .BYTE      $0F     ; DTIMLO
   572 3362 00			       .BYTE      $00     ; DRESVD
   573 3363 04			       .BYTE      $04     ; DBYTL
   574 3364 00			       .BYTE      $00     ; DBYTH
   575 3365 00			       .BYTE      $00     ; DAUX1
   576 3366 00			       .BYTE      $00     ; DAUX2
   577 					
   578 				;;; End CIO STATUS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   579
   580 				;;; CIO SPECIAL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   581
   582 3367			SPEC:
   583 				       ; HANDLE LOCAL COMMANDS.
   584
   585 3367 A5 22		       LDA     ZICCOM
   586 3369 C9 0F		       CMP     #$0F    ; 15 = FLUSH
   587 336B D0 06		       BNE     S1      ; NO.
   588 336D 20 B1 32		       JSR     PFLUSH  ; DO FLUSH
   589 3370 A0 01		       LDY     #$01    ; SUCCESS
   590 3372 60			       RTS
   591
   592 				       ; HANDLE SIO COMMANDS.
   593 				       ; GET DSTATS FOR COMMAND
   594
   595 3373 A9 71		S1:	LDA     #DEVIDN ; $71
   596 3375 8D 00 03		       STA     DDEVIC
   597 3378 A5 21		       LDA     ZICDNO  ; UNIT #
   598 337A 8D 01 03		       STA     DUNIT
   599 337D A9 FF		       LDA     #$FF    ; DS INQ
   600 337F 8D 02 03		       STA     DCOMND
   601 3382 A9 40		       LDA     #DSREAD
   602 3384 8D 03 03		       STA     DSTATS
   603 3387 A9 6B		       LDA     #<INQDS
   604 3389 8D 04 03		       STA     DBUFL
   605 338C A9 34		       LDA     #>INQDS
   606 338E 8D 05 03		       STA     DBUFH
   607 3391 A9 01		       LDA     #$01
   608 3393 8D 08 03		       STA     DBYTL
   609 3396 A9 00		       LDA     #$00
   610 3398 8D 09 03		       STA     DBYTH
   611 339B 8D 0B 03		       STA     DAUXH
   612 339E A9 0F		       LDA     #$0F
   613 33A0 8D 06 03		       STA     DTIMLO
   614 33A3 A5 22		       LDA     ZICCOM
   615 33A5 8D 0A 03		       STA     DAUXL
   616 33A8 20 59 E4		       JSR     SIOV    ; DO IT...
   617
   618 33AB AD 03 03		       LDA     DSTATS
   619 33AE 10 02		       BPL     :DSOK
   620 33B0			DSERR:
   621 33B0 A8				TAY             ; RET THE ERR
   622 33B1 60			       RTS
   623
   624 				       ; WE GOT A DSTATS INQUIRY
   625 				       ; IF $FF, THE COMMAND IS
   626 				       ; INVALID
   627
   628 33B2			DSOK:
   629 33B2 AD 6B 34			LDA     INQDS
   630 33B5 C9 FF		       CMP     #$FF    ; INVALID?
   631 33B7 D0 04		       BNE     DSGO   ; DO THE CMD
   632 33B9 A0 92		       LDY     #$92    ; UNIMP CMD
   633 33BB 98			       TYA
   634 33BC 60			       RTS
   635
   636 					;; Do the special, since we want to pass in all the IOCB
   637 					;; Parameters to the DCB, This is being done long-hand.
   638 					
   639 33BD A9 71		DSGO:	LDA	#DEVIDN
   640 33BF 8D 00 03			STA	DDEVIC
   641 33C2 A5 21			LDA	ZICDNO
   642 33C4 8D 01 03			STA	DUNIT
   643 33C7 A5 22			LDA	ZICCOM
   644 33C9 8D 02 03			STA	DCOMND
   645 33CC AD 6B 34			LDA	INQDS
   646 33CF 8D 03 03			STA	DSTATS
   647 33D2 A5 24			LDA	ZICBAL
   648 33D4 8D 04 03			STA	DBUFL
   649 33D7 A5 25			LDA	ZICBAH
   650 33D9 8D 05 03			STA	DBUFH
   651 33DC A9 0F			LDA	#$0F
   652 33DE 8D 06 03			STA	DTIMLO
   653 33E1 A9 00			LDA	#$00		; 256 bytes
   654 33E3 8D 08 03			STA	DBYTL
   655 33E6 A9 01			LDA	#$01
   656 33E8 8D 09 03			STA	DBYTH
   657 33EB A5 2A			LDA	ZICAX1
   658 33ED 8D 0A 03			STA	DAUXL
   659 33F0 A5 2B			LDA	ZICAX2
   660 33F2 8D 0B 03			STA	DAUXH
   661
   662 33F5 20 59 E4			JSR	SIOV
   663
   664 					;; Return DSTATS in Y and A
   665
   666 33F8 AD 03 03			LDA	DSTATS
   667 33FB A8				TAY
   668
   669 33FC 60				RTS
   670
   671 					
   672 				;;; End CIO SPECIAL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   673
   674 				;;; Utility Functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   675
   676 				       ; ENABLE PROCEED INTERRUPT
   677
   678 33FD			ENPRCD:
   679 33FD AD 02 D3			LDA     PACTL
   680 3400 09 01		       ORA     #$01    ; ENABLE BIT 0
   681 3402 8D 02 D3		       STA     PACTL
   682 3405 60			       RTS
   683
   684 				       ; DISABLE PROCEED INTERRUPT
   685
   686 3406			DIPRCD:
   687 3406 AD 02 D3			LDA     PACTL
   688 3409 29 FE		       AND     #$FE    ; DISABLE BIT0
   689 340B 8D 02 D3		       STA     PACTL
   690 340E 60			       RTS
   691
   692 				       ; GET ZIOCB DEVNO - 1 INTO X
   693 				       
   694 340F			GDIDX:	
   695 340F A6 21		       LDX     ZICDNO  ; IOCB UNIT #
   696 3411 CA			       DEX             ; - 1
   697 3412 60			       RTS
   698 					
   699 				;;; End Utility Functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   700
   701 				;;; Proceed Vector ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   702
   703 3413			PRCVEC 
   704 3413 A9 01		       LDA     #$01
   705 3415 8D 46 34		       STA     TRIP
   706 3418 68			       PLA
   707 3419 40			       RTI
   708 					
   709 				;;; End Proceed Vector ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   710
   711 				;;; Variables
   712
   713 				       ; DEVHDL TABLE FOR N:
   714
   715 341A 92 31		CIOHND .WORD      OPEN-1
   716 341C F0 31		       .WORD      CLOSE-1
   717 341E 1A 32		       .WORD      GET-1
   718 3420 8F 32		       .WORD      PUT-1
   719 3422 00 33		       .WORD      STATUS-1
   720 3424 66 33		       .WORD      SPEC-1
   721
   722 				       ; BANNERS
   723 				       
   724 3426 23 46 55 4A 49 4E + BREADY .BYTE      '#FUJINET READY',$9B
   725 3435 23 46 55 4A 49 4E + BERROR .BYTE      '#FUJINET ERROR',$9B
   726
   727 				       ; VARIABLES
   728
   729 3444 00 00		DSAV   .WORD      $0000
   730 = 3446			TRIP   .DS      1       ; INTR FLAG
   731 = 3447			AX1SV  .DS      MAXDEV  ; AUX1 SAVE
   732 = 344B			AX2SV  .DS      MAXDEV  ; AUX2 SAVE
   733 = 344F			STSV   .DS      4*MAXDEV ; STATUS SAVE
   734 = 345F			RLEN   .DS      MAXDEV  ; RCV LEN
   735 = 3463			ROFF   .DS      MAXDEV  ; RCV OFFSET
   736 = 3467			TOFF   .DS      MAXDEV  ; TRX OFFSET
   737 = 346B			INQDS  .DS      1       ; DSTATS INQ
   738
   739 				       ; BUFFERS (PAGE ALIGNED)
   740
   741 346C				.ALIGN	$100
   742 					
   743 = 3500			RBUF	.DS	$80		; 128 bytes
   744 = 3580			TBUF	.DS	$80		; 128 bytes
   745 					
   746 = 3600			PGEND	= *
   747
   748 02E0-02E1> 00 31			RUN	START
   749 				       END
