name: "FujiNet Tagged Version Release"

on:
  push:
    tags:
      - "v*"

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        target-platform: [ATARI, ADAM, APPLE]
#        target-platform: [ATARI, ADAM, APPLE]

    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Fetch Tag Info
      run: git fetch --tags --force

    - name: Get Tag Info
      uses: ericcornelissen/git-tag-annotation-action@v2
      id: tag-data

    - name: Show Tag Info
      run: echo ${{ steps.tag-data.outputs.git-tag-annotation }}

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        pip install Jinja2
        pip install pyyaml

    - name: Show python version
      run: python --version

    - name: Show pio system info
      run: pio system info

    - name: Show pio location
      run: pip show platformio

    - name: Create INI ATARI for Build
      if: ${{ matrix.target-platform == 'ATARI' }}
      run: cp /home/runner/work/fujinet-platformio/fujinet-platformio/.github/workflows/platformio.ini.${{ matrix.target-platform }} /home/runner/work/fujinet-platformio/fujinet-platformio/platformio.ini

    - name: Create INI ADAM for Build
      if: ${{ matrix.target-platform == 'ADAM' }}
      run: cp /home/runner/work/fujinet-platformio/fujinet-platformio/.github/workflows/platformio.ini.${{ matrix.target-platform }} /home/runner/work/fujinet-platformio/fujinet-platformio/platformio.ini

    - name: Create INI APPLE for Build
      if: ${{ matrix.target-platform == 'APPLE' }}
      run: cp /home/runner/work/fujinet-platformio/fujinet-platformio/.github/workflows/platformio.ini.${{ matrix.target-platform }} /home/runner/work/fujinet-platformio/fujinet-platformio/platformio.ini

    - name: Show platformio.ini
      run: cat /home/runner/work/fujinet-platformio/fujinet-platformio/platformio.ini

    - name: Install espressif32 platform
      run: pio pkg install -p "platformio/espressif32@6.1.0"

    - name: ATARI Build
      if: ${{ matrix.target-platform == 'ATARI' }}
      run: pio run -e fujinet-atari-v1

    - name: ADAM Build
      if: ${{ matrix.target-platform == 'ADAM' }}
      run: pio run -e fujinet-adam-v1

    - name: APPLE Build
      if: ${{ matrix.target-platform == 'APPLE' }}
      run: pio run -e fujiapple-rev0

    - name: ATARI Build Filesystem
      if: ${{ matrix.target-platform == 'ATARI' }}
      run: pio run -t buildfs -e fujinet-atari-v1

    - name: ADAM Build Filesystem
      if: ${{ matrix.target-platform == 'ADAM' }}
      run: pio run -t buildfs -e fujinet-adam-v1

    - name: APPLE Build Filesystem
      if: ${{ matrix.target-platform == 'APPLE' }}
      run: pio run -t buildfs -e fujiapple-rev0

    - name: Get Commits since last Release
      id: changes
      uses: simbo/changes-since-last-release-action@v1
      with:
        line-prefix: "*"
        include-hashes: false

    - name: Save Commits since last Release
      run: |
        echo "${{ steps.changes.outputs.log }}" > change.log
        cat change.log

    - name: Create JSON Description from Tag Annotation if Available
      if: ${{ steps.tag-data.outputs.git-tag-annotation != '' }}
      run: echo "${{ steps.tag-data.outputs.git-tag-annotation }}" > annotation.txt

    - name: Create Release ZIP
      run: .github/workflows/create-zip.sh ${{ matrix.target-platform }} ${{ github.ref_name }} ${{ github.repository_owner }}
      shell: bash

    - name: Upload Release ZIP
      uses: actions/upload-artifact@v2.3.1
      with:
        name: fujinet-${{ matrix.target-platform }}-${{ github.ref_name }}.zip
        path: fujinet-${{ matrix.target-platform }}-${{ github.ref_name }}.zip

    - name: Upload Releases JSON
      uses: actions/upload-artifact@v2.3.1
      with:
        name: releases-${{ matrix.target-platform }}.json
        path: releases-${{ matrix.target-platform }}.json

    - name: Upload Change Log
      uses: actions/upload-artifact@v2.3.1
      with:
        name: change.log
        path: change.log

    - name: Push ZIP to release
      uses: softprops/action-gh-release@v1
      with:
        files: fujinet-${{ matrix.target-platform }}-${{ github.ref_name }}.zip

    - name: Push JSON to release
      uses: softprops/action-gh-release@v1
      with:
        files: releases-${{ matrix.target-platform }}.json

    - name: Push Change Log to release
      uses: softprops/action-gh-release@v1
      with:
        files: change.log

    - name: Get Git Short SHA
      id: shortsha
      run: echo "::set-output name=shortsha::$(git rev-parse --short HEAD)"

    - name: Notify FujiNet server
      run: sh -c 'echo "wget https://fujinet.online/newfirmware.php?version=${{ github.ref_name }}&platform=${{ matrix.target-platform }}&githash=${{ steps.shortsha.outputs.shortsha }}"'
